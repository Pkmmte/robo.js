"use strict";(self.webpackChunkrobo_js_docs=self.webpackChunkrobo_js_docs||[]).push([[4081],{6040:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var s=n(4848),r=n(8453),a=n(1470),o=n(9365);const i={image:"https://preview.robojs.dev?path=/robojs/flashcore"},c="\u26a1 Flashcore Database",l={id:"robojs/flashcore",title:"\u26a1 Flashcore Database",description:"Flashcore is your Robo's built-in database\u2014ready to hold onto all the key-value pairs your Robo needs for the long haul. Trust us, it's a breeze to use!",source:"@site/docs/robojs/flashcore.md",sourceDirName:"robojs",slug:"/robojs/flashcore",permalink:"/robojs/flashcore",draft:!1,unlisted:!1,editUrl:"https://github.com/Wave-Play/robo.js/edit/main/docs/docs/robojs/flashcore.md",tags:[],version:"current",lastUpdatedBy:"Pkmmte Xeleon",lastUpdatedAt:1715550872e3,frontMatter:{image:"https://preview.robojs.dev?path=/robojs/flashcore"},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udee0\ufe0f Configuration",permalink:"/robojs/config"},next:{title:"\ud83d\udc40 Internals",permalink:"/robojs/internals"}},d={},u=[{value:"Saving and Fetching Data",id:"saving-and-fetching-data",level:2},{value:"Deleting Data",id:"deleting-data",level:2},{value:"Data Types",id:"data-types",level:2},{value:"Watching for Changes",id:"watching-for-changes",level:2},{value:"Namespaces",id:"namespaces",level:2},{value:"Using Keyv Adapters",id:"using-keyv-adapters",level:2},{value:"TypeScript Support",id:"typescript-support",level:3},{value:"Opting for Flashcore over States",id:"opting-for-flashcore-over-states",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"-flashcore-database",children:"\u26a1 Flashcore Database"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Flashcore"})," is your Robo's built-in database\u2014ready to hold onto all the key-value pairs your Robo needs for the long haul. Trust us, it's a breeze to use!"]}),"\n",(0,s.jsx)(t.h2,{id:"saving-and-fetching-data",children:"Saving and Fetching Data"}),"\n",(0,s.jsxs)(t.p,{children:["Think of ",(0,s.jsx)(t.strong,{children:"Flashcore"})," as ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/docs/basics/states",children:"States"})})," except permanent. It's in it for the long game, and yes, it's async! Here's how we're handling a user's high score in a game:"]}),"\n",(0,s.jsx)(t.p,{children:"Stashing the high score:"}),"\n",(0,s.jsxs)(a.A,{groupId:"examples-script",children:[(0,s.jsx)(o.A,{value:"js",label:"Javascript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/commands/update-score.js" {18}',children:"import { Flashcore } from 'robo.js'\n\nexport const config = {\n\toptions: [\n\t\t{\n\t\t\tname: 'score',\n\t\t\tdescription: 'The new high score',\n\t\t\ttype: 'integer',\n\t\t\trequired: true\n\t\t}\n\t]\n}\n\nexport default async (interaction) => {\n\tconst userId = interaction.user.id\n\tconst score = interaction.options.get('score')?.value\n\n\tawait Flashcore.set(userId, score)\n\treturn `New high score of ${score} stashed away! \ud83c\udf89`\n}\n"})})}),(0,s.jsx)(o.A,{value:"ts",label:"Typescript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'showLineNumbers title="/src/commands/update-score.ts" {19}',children:"import { Flashcore, type CommandConfig } from 'robo.js'\nimport type { CommandInteraction } from 'discord.js'\n\nexport const config: CommandConfig = {\n\toptions: [\n\t\t{\n\t\t\tname: 'score',\n\t\t\tdescription: 'The new high score',\n\t\t\ttype: 'integer',\n\t\t\trequired: true\n\t\t}\n\t]\n}\n\nexport default async (interaction: CommandInteraction) => {\n\tconst userId = interaction.user.id\n\tconst score = interaction.options.get('score')?.value as number\n\n\tawait Flashcore.set(userId, score)\n\treturn `New high score of ${score} stashed away! \ud83c\udf89`\n}\n"})})})]}),"\n",(0,s.jsx)(t.p,{children:"Fetching the high score:"}),"\n",(0,s.jsxs)(a.A,{groupId:"examples-script",children:[(0,s.jsx)(o.A,{value:"js",label:"Javascript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:'title="/src/commands/get-score.js" showLineNumbers {6}',children:"import { Flashcore } from 'robo.js'\n\nexport default async (interaction) => {\n\tconst userId = interaction.user.id\n\n\tconst score = await Flashcore.get(userId)\n\treturn score ? `High score alert: ${score}! \ud83c\udfc6` : 'No high score found. Game time! \ud83c\udfae'\n}\n"})})}),(0,s.jsx)(o.A,{value:"ts",label:"Typescript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="/src/commands/get-score.ts" showLineNumbers {7}',children:"import { Flashcore } from 'robo.js'\nimport type { CommandInteraction } from 'discord.js'\n\nexport default async (interaction: CommandInteraction) => {\n\tconst userId = interaction.user.id\n\n\tconst score = await Flashcore.get(userId)\n\treturn score ? `High score alert: ${score}! \ud83c\udfc6` : 'No high score found. Game time! \ud83c\udfae'\n}\n"})})})]}),"\n",(0,s.jsx)(t.admonition,{title:"Heads Up!!!",type:"info",children:(0,s.jsxs)(t.p,{children:["Don't forget to ",(0,s.jsx)(t.code,{children:"await"})," your Flashcore calls!"]})}),"\n",(0,s.jsx)(t.h2,{id:"deleting-data",children:"Deleting Data"}),"\n",(0,s.jsxs)(t.p,{children:["You can delete a key from Flashcore with the ",(0,s.jsx)(t.code,{children:"delete()"})," function."]}),"\n",(0,s.jsx)(t.p,{children:"Here's a command that deletes a user's high score:"}),"\n",(0,s.jsxs)(a.A,{groupId:"examples-script",children:[(0,s.jsx)(o.A,{value:"js",label:"Javascript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:'title="/src/commands/delete-score.js" showLineNumbers {6}',children:"import { Flashcore } from 'robo.js'\n\nexport default async (interaction) => {\n\tconst userId = interaction.user.id\n\n\tawait Flashcore.delete(userId)\n\n\treturn `Deleted ${userId}'s high score...`\n}\n"})})}),(0,s.jsx)(o.A,{value:"ts",label:"Typescript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="/src/commands/delete-score.ts" showLineNumbers {7}',children:"import { Flashcore } from 'robo.js'\nimport type { CommandInteraction } from 'discord.js'\n\nexport default async (interaction: CommandInteraction) => {\n\tconst userId = interaction.user.id\n\n\tawait Flashcore.delete(userId)\n\n\treturn `Deleted ${userId}'s high score...`\n}\n"})})})]}),"\n",(0,s.jsx)(t.h2,{id:"data-types",children:"Data Types"}),"\n",(0,s.jsxs)(t.p,{children:["Feel free to store any ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"serializable"})})," data type in Flashcore. Primitives and objects are both supported, but not functions or class instances!"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:"showLineNumbers",children:"await Flashcore.set('banned', true)\nawait Flashcore.set('score', 40)\nawait Flashcore.set('top-name', 'Robo')\nawait Flashcore.set('top-user', {\n\tname: 'Robo',\n\tscore: 40\n})\nawait Flashcore.set('top-games', [\n\t{ name: 'Robo', score: 40 },\n\t{ name: 'Robo 2', score: 30 },\n\t{ name: 'Robo 3', score: 20 }\n])\n"})}),"\n",(0,s.jsx)(t.p,{children:"When you fetch this data again, it'll be the same type as when you saved it."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:"showLineNumbers",children:"const isBanned = await Flashcore.get('banned') // boolean\nconst score = await Flashcore.get('score') // number\nconst topName = await Flashcore.get('top-name') // string\nconst topGames = await Flashcore.get('top-games') // object array\n"})}),"\n",(0,s.jsx)(t.h2,{id:"watching-for-changes",children:"Watching for Changes"}),"\n",(0,s.jsxs)(t.p,{children:["You can also watch for changes to a key's value over time with the ",(0,s.jsx)(t.code,{children:"on()"})," function."]}),"\n",(0,s.jsx)(t.p,{children:"Here's a command that sends a message to a channel whenever a user's high score changes:"}),"\n",(0,s.jsxs)(a.A,{groupId:"examples-script",children:[(0,s.jsx)(o.A,{value:"js",label:"Javascript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/commmands/watch-score.js" {6-8}',children:"import { Flashcore } from 'robo.js'\n\nexport default async (interaction) => {\n\tconst userId = interaction.user.id\n\n\tFlashcore.on(userId, (score) => {\n\t\tinteraction.channel.send(`High score alert for ${userId}: ${score}! \ud83c\udfc6`)\n\t})\n\n\treturn `Watching for changes to ${userId}'s high score...`\n}\n"})})}),(0,s.jsx)(o.A,{value:"ts",label:"Typescript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'showLineNumbers title="/src/commmands/watch-score.ts" {7-9}',children:"import { Flashcore } from 'robo.js'\nimport type { CommandInteraction } from 'discord.js'\n\nexport default async (interaction: CommandInteraction) => {\n\tconst userId = interaction.user.id\n\n\tFlashcore.on(userId, (score) => {\n\t\tinteraction.channel.send(`High score alert for ${userId}: ${score}! \ud83c\udfc6`)\n\t})\n\n\treturn `Watching for changes to ${userId}'s high score...`\n}\n"})})})]}),"\n",(0,s.jsxs)(t.p,{children:["You can also stop watching for changes with the ",(0,s.jsx)(t.code,{children:"off()"})," function."]}),"\n",(0,s.jsx)(t.p,{children:"Here's a command that stops watching for changes to a user's high score:"}),"\n",(0,s.jsxs)(a.A,{groupId:"examples-script",children:[(0,s.jsx)(o.A,{value:"js",label:"Javascript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/commands/stop-watching-score.js" {6}',children:"import { Flashcore } from 'robo.js'\n\nexport default async (interaction) => {\n\tconst userId = interaction.user.id\n\n\tFlashcore.off(userId)\n\n\treturn `Stopped watching for changes to ${userId}'s high score...`\n}\n"})})}),(0,s.jsx)(o.A,{value:"ts",label:"Typescript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'showLineNumbers title="/src/commands/stop-watching-score.ts" {7}',children:"import { Flashcore } from 'robo.js'\nimport type { CommandInteraction } from 'discord.js'\n\nexport default async (interaction: CommandInteraction) => {\n\tconst userId = interaction.user.id\n\n\tFlashcore.off(userId)\n\n\treturn `Stopped watching for changes to ${userId}'s high score...`\n}\n"})})})]}),"\n",(0,s.jsx)(t.h2,{id:"namespaces",children:"Namespaces"}),"\n",(0,s.jsx)(t.p,{children:"In key-value stores, ensuring that your keys are unique is crucial. Flashcore's namespacing feature helps you do just that!"}),"\n",(0,s.jsx)(t.p,{children:"Think of namespacing like creating separate drawers for different categories of items. This way, the same item name in different drawers doesn't get mixed up. It's especially handy when you're managing data for various servers or user groups."}),"\n",(0,s.jsxs)(t.p,{children:["When you use any Flashcore function, you can include an ",(0,s.jsx)(t.code,{children:"options"})," object as the last parameter. Within this, specify a ",(0,s.jsx)(t.code,{children:"namespace"})," property to categorize your keys."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"Flashcore.set('my-key', 'example-value', {\n\tnamespace: 'my-namespace'\n})\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This line effectively places ",(0,s.jsx)(t.code,{children:"'my-key'"}),' into a specific category or\n"drawer" labeled ',(0,s.jsx)(t.code,{children:"'my-namespace'"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Let\u2019s apply this to a real-world scenario, like tracking high scores for users across different servers. For each server, you can create a unique namespace. This way, the same user can have different scores on different servers, and there's no mix-up."}),"\n",(0,s.jsx)(t.p,{children:"Here\u2019s a snippet showing how to set a user's high score in a specific server's namespace:"}),"\n",(0,s.jsxs)(a.A,{groupId:"examples-script",children:[(0,s.jsx)(o.A,{value:"js",label:"Javascript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/commands/update-score.ts" {18-20}',children:"import { Flashcore } from 'robo.js'\n\nexport const config = {\n\toptions: [\n\t\t{\n\t\t\tname: 'score',\n\t\t\tdescription: 'The new high score',\n\t\t\ttype: 'integer',\n\t\t\trequired: true\n\t\t}\n\t]\n}\n\nexport default async (interaction) => {\n\tconst userId = interaction.user.id\n\tconst score = interaction.options.get('score')?.value\n\n\tawait Flashcore.set(userId, score, {\n\t\tnamespace: interaction.guildId\n\t})\n\n\treturn `New high score of ${score} stashed away! \ud83c\udf89`\n}\n"})})}),(0,s.jsx)(o.A,{value:"ts",label:"Typescript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'showLineNumbers title="/src/commands/update-score.ts" {19-21}',children:"import { Flashcore, type CommandConfig } from 'robo.js'\nimport type { CommandInteraction } from 'discord.js'\n\nexport const config: CommandConfig = {\n\toptions: [\n\t\t{\n\t\t\tname: 'score',\n\t\t\tdescription: 'The new high score',\n\t\t\ttype: 'integer',\n\t\t\trequired: true\n\t\t}\n\t]\n}\n\nexport default async (interaction: CommandInteraction) => {\n\tconst userId = interaction.user.id\n\tconst score = interaction.options.get('score')?.value as number\n\n\tawait Flashcore.set(userId, score, {\n\t\tnamespace: interaction.guildId\n\t})\n\n\treturn `New high score of ${score} stashed away! \ud83c\udf89`\n}\n"})})})]}),"\n",(0,s.jsxs)(t.p,{children:["In this example, ",(0,s.jsx)(t.code,{children:"interaction.guildId"})," is our namespace. By doing this, each server gets its own unique set of high scores for each user."]}),"\n",(0,s.jsx)(t.p,{children:"And when you need to get a score, use the same namespace:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"await Flashcore.get(userId, {\n\tnamespace: interaction.guildId\n})\n"})}),"\n",(0,s.jsx)(t.p,{children:"With namespacing, you efficiently manage data for different groups or contexts without any overlap or confusion!"}),"\n",(0,s.jsx)(t.h2,{id:"using-keyv-adapters",children:"Using Keyv Adapters"}),"\n",(0,s.jsxs)(t.p,{children:["Flashcore's storage medium isn't set in stone. It's cozy with the file system by default but can switch to Keyv adapters. Want to use SQLite instead of the file system? You can configure this in the ",(0,s.jsx)(t.code,{children:"robo.mjs"})," config file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/config/robo.mjs" {5-7}',children:"import { SQLite } from '@keyv/sqlite'\n\nexport default {\n\tflashcore: {\n\t\tkeyv: {\n\t\t\tstore: new SQLite('sqlite://robo.db')\n\t\t}\n\t}\n}\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Dig into more about Keyv Adapters on their ",(0,s.jsx)(t.a,{href:"https://github.com/jaredwray/keyv/tree/main#storage-adapters",children:"GitHub repo"}),"."]})}),"\n",(0,s.jsx)(t.h3,{id:"typescript-support",children:"TypeScript Support"}),"\n",(0,s.jsx)(t.p,{children:"Flashcore supports generics when retrieving data with TypeScript. This means you can specify the type of data you're expecting to get back from Flashcore for better type safety."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"showLineNumbers",children:"// Primitives are fully supported\nconst isBanned = await Flashcore.get<boolean>(userId + '-banned')\nconst score = await Flashcore.get<number>(userId + '-score')\nconst topName = await Flashcore.get<string>('top-name')\n\n// Objects are supported too!\ninterface Game {\n\tname: string\n}\ninterface UserSettings {\n\ttheme: string\n\tnotifications: boolean\n}\nconst topGames = await Flashcore.get<Game[]>('top-games')\nconst settings = await Flashcore.get<UserSettings>(userId + '-settings')\n"})}),"\n",(0,s.jsx)(t.admonition,{title:"Disclaimer",type:"info",children:(0,s.jsx)(t.p,{children:"This will only tell TypeScript what type of data you're expecting to get back. It won't parse the data into that type for you, so make sure you're saving the right type of data to begin with!"})}),"\n",(0,s.jsx)(t.h2,{id:"opting-for-flashcore-over-states",children:"Opting for Flashcore over States"}),"\n",(0,s.jsx)(t.p,{children:"Flashcore should be your choice for data that requires long-term storage or needs to be preserved across sessions. It's particularly useful for settings, historical data, or any information that needs consistent and reliable storage."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Data Persistence:"})," Ensures long-term data storage, ideal for settings and permanent records."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Asynchronous Operations:"})," Provides consistent and reliable data operations, necessary for durable storage."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"External Storage with Keyv Adapters:"})," Enables storing data in external databases like Postgres, offering flexibility and scalability."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Serializable Data Only:"})," Suited for serializable data, maintaining data stability and compatibility."]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>o});n(6540);var s=n(8215);const r={tabItem:"tabItem_Ymn6"};var a=n(4848);function o(e){let{children:t,hidden:n,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,o),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>w});var s=n(6540),r=n(8215),a=n(3104),o=n(6347),i=n(205),c=n(7485),l=n(1682),d=n(679);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:r}}=e;return{value:t,label:n,attributes:s,default:r}}))}(n);return function(e){const t=(0,l.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})}),[a,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=h(e),[o,c]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:a}))),[l,u]=m({queryString:n,groupId:r}),[g,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,a]=(0,d.Dv)(n);return[r,(0,s.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:r}),j=(()=>{const e=l??g;return p({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{j&&c(j)}),[j]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),f(e)}),[u,f,a]),tabValues:a}}var f=n(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(4848);function x(e){let{className:t,block:n,selectedValue:s,selectValue:o,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),r=i[n].value;r!==s&&(l(t),o(r))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>c.push(e),onKeyDown:u,onClick:d,...a,className:(0,r.A)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:r}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function v(e){const t=g(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,b.jsx)(x,{...t,...e}),(0,b.jsx)(y,{...t,...e})]})}function w(e){const t=(0,f.A)();return(0,b.jsx)(v,{...e,children:u(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(6540);const r={},a=s.createContext(r);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);