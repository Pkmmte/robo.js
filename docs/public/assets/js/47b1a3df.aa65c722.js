"use strict";(self.webpackChunkrobo_js_docs=self.webpackChunkrobo_js_docs||[]).push([[7845],{9420:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>m});var s=n(5893),r=n(1151),i=n(5396),o=n(352),a=n(4263);const l={description:"Learn how to add multiplayer features to your Discord Activity using Robo.js for real-time communication between clients.",image:"https://preview.robojs.dev?path=/discord-activities/multiplayer"},c="\u2694\ufe0f Multiplayer",d={id:"discord-activities/multiplayer",title:"\u2694\ufe0f Multiplayer",description:"Learn how to add multiplayer features to your Discord Activity using Robo.js for real-time communication between clients.",source:"@site/docs/discord-activities/multiplayer.mdx",sourceDirName:"discord-activities",slug:"/discord-activities/multiplayer",permalink:"/discord-activities/multiplayer",draft:!1,unlisted:!1,editUrl:"https://github.com/Wave-Play/robo.js/edit/main/docs/docs/discord-activities/multiplayer.mdx",tags:[],version:"current",lastUpdatedBy:"Pkmmte Xeleon",lastUpdatedAt:1720235282e3,frontMatter:{description:"Learn how to add multiplayer features to your Discord Activity using Robo.js for real-time communication between clients.",image:"https://preview.robojs.dev?path=/discord-activities/multiplayer"},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udee1\ufe0f Discord Proxy",permalink:"/discord-activities/proxy"},next:{title:"\u2728 Getting Started with Discord Bots",permalink:"/discord-bots/getting-started"}},u={},m=[{value:"Sync Plugin",id:"sync-plugin",level:2},{value:"Setup",id:"setup",level:3},{value:"Usage",id:"usage",level:3},{value:"Dependency Array",id:"dependency-array",level:3},{value:"Learn More",id:"learn-more",level:3},{value:"Colyseus",id:"colyseus",level:2},{value:"Setup",id:"setup-1",level:3},{value:"Usage",id:"usage-1",level:3},{value:"More About Colyseus",id:"more-about-colyseus",level:3}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"\ufe0f-multiplayer",children:"\u2694\ufe0f Multiplayer"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Discord Activities"})," are a great way to create multiplayer games and experiences. Even if you're not building a game, you can still use multiplayer features to create collaborative activities or experiences."]}),"\n",(0,s.jsxs)(t.p,{children:["Multiplayer features often involve websockets for real-time communication between clients. There are many ways to implement features like this. Depending on what you're building, we recommend either using our ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#sync-plugin",children:"@robojs/sync"})})," plugin or a more powerful solution like ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://colyseus.io/",children:"Colyseus"})}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Need a tutorial? We've got you covered!"}),"\n",(0,s.jsx)(o._,{children:(0,s.jsx)(i.Z,{href:"https://dev.to/waveplay/how-to-add-multiplayer-to-your-discord-activity-lo1",title:"\ud83d\udcda Add Multiplayer to Your Activity",description:"Create a real-time multiplayer Discord Activity."})}),"\n",(0,s.jsx)(t.h2,{id:"sync-plugin",children:"Sync Plugin"}),"\n",(0,s.jsxs)(t.p,{children:["If you're building a ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://react.dev",children:"React"})})," app, you can use the ",(0,s.jsx)(t.strong,{children:"@robojs/sync"})," plugin to sync state across clients in real-time. This is the easiest way to add multiplayer functionality to your Discord Activity."]}),"\n",(0,s.jsxs)(t.p,{children:["Websocket features can be complex to set up, but ",(0,s.jsx)(t.strong,{children:"@robojs/sync"})," handles all of that for you. ",(0,s.jsx)(t.strong,{children:"Robo.js"})," plugins are designed to work out of the box, no matter how powerful, so you can focus on features!"]}),"\n",(0,s.jsx)(t.h3,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(t.p,{children:"To install, run the following command:"}),"\n",(0,s.jsx)(a.o,{execute:!0,children:"robo add @robojs/sync"}),"\n",(0,s.jsxs)(t.p,{children:["You will need to wrap your app with the ",(0,s.jsx)(t.code,{children:"<SyncProvider>"})," component. This will handle state synchronization for you."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="/src/app/App.tsx"',children:"import { SyncProvider } from '@robojs/sync'\n\nexport function App() {\n\treturn (\n\t\t<SyncProvider>\n\t\t\t<Activity />\n\t\t</SyncProvider>\n\t)\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.p,{children:["If you're already familiar with React's ",(0,s.jsx)(t.code,{children:"useState"})," hook, then you'll feel right at home with ",(0,s.jsx)(t.code,{children:"useSyncState"}),". You can use it just like React's ",(0,s.jsx)(t.code,{children:"useState"})," hook, but the state will be synced across all clients in real-time. The only difference is that you need to provide a dependency array as the second argument."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="/src/components/Player.tsx"',children:"import { useSyncState } from '@robojs/sync'\n\nexport function Player() {\n\tconst [position, setPosition] = useSyncState({ x: 0, y: 0 }, ['position'])\n\n\tconst handleMouseMove = (event) => {\n\t\tsetPosition({ x: event.clientX, y: event.clientY })\n\t}\n\n\treturn (\n\t\t<div onMouseMove={handleMouseMove}>\n\t\t\tPosition: {position.x}, {position.y}\n\t\t</div>\n\t)\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Updating the state will cause all clients to receive the new state in real-time. When doing so, we recommend using an updater function to ensure you're always working with the latest state."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="/src/components/Player.tsx"',children:"const handleMouseMove = (event) => {\n\tsetPosition((prev) => ({ x: event.clientX, y: event.clientY }))\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"dependency-array",children:"Dependency Array"}),"\n",(0,s.jsxs)(t.p,{children:["The dependency array (",(0,s.jsx)(t.code,{children:"['position']"}),") is used to determine which clients should share the same state. In this case, all clients with the same dependency array will share the same ",(0,s.jsx)(t.code,{children:"position"})," state. You can use any value in the dependency array, such as the user's ID or a room ID."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="/src/components/Player.tsx"',children:"const { session } = useDiscordSdk()\nconst [position, setPosition] = useSyncState({ x: 0, y: 0 }, [session.user.id, 'position'])\n"})}),"\n",(0,s.jsx)(t.h3,{id:"learn-more",children:"Learn More"}),"\n",(0,s.jsx)(o._,{children:(0,s.jsx)(i.Z,{href:"../plugins/sync",title:"\ud83d\udd0c @robojs/sync",description:"Real-time state synchronization for multiplayer activities."})}),"\n",(0,s.jsx)(t.h2,{id:"colyseus",children:"Colyseus"}),"\n",(0,s.jsxs)(t.p,{children:["If you're building a more complex multiplayer game, we recommend using ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://colyseus.io/",children:"Colyseus"})}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Colyseus is a powerful multiplayer game server that handles real-time communication between clients. It is well tested, scalable, and designed for building real-time multiplayer games. It works great with pretty much any game engine, UI library, or framework. That includes ",(0,s.jsx)(t.strong,{children:"Robo.js"}),"!"]}),"\n",(0,s.jsx)(t.h3,{id:"setup-1",children:"Setup"}),"\n",(0,s.jsx)(t.p,{children:"Unlike Robo plugins, Colyseus requires a bit more setup. Let's start by installing dependencies:"}),"\n",(0,s.jsx)(a.o,{install:!0,children:"@colyseus/core @colyseus/schema @colyseus/ws-transport colyseus.js"}),"\n",(0,s.jsx)(t.p,{children:"From here on, you'll need to:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Create a Server"}),": We recommend extending ",(0,s.jsx)(t.code,{children:"NodeEngine"})," in ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"../plugins/server",children:"@robojs/server"})})," to work with Colyseus."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Define Schemas"}),": Use ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://docs.colyseus.io/schema/",children:"@colyseus/schema"})})," to define your state schemas."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Define Rooms"}),": Create rooms that handle game logic and state synchronization."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Connect Clients"}),": Use ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://docs.colyseus.io/client/",children:"Colyseus.js"})})," to connect clients to your server."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"If the above sounds complicated, don't worry! We've created a template to help you get started!"}),"\n",(0,s.jsx)(o._,{children:(0,s.jsx)(i.Z,{href:"https://github.com/Wave-Play/robo.js/tree/main/templates/activity-ts-colyseus-react",title:"\ud83d\udd17 Multiplayer Colyseus (TS)",description:"A simplified TypeScript template using Colyseus."})}),"\n",(0,s.jsx)(t.h3,{id:"usage-1",children:"Usage"}),"\n",(0,s.jsx)(t.p,{children:"Once you've set up your server and rooms, you can start using Colyseus to handle real-time communication between clients. You can use Colyseus to handle game logic, state synchronization, and more."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="/src/core/colyseus.ts"',children:"import { Client } from 'colyseus.js'\n\nconst client = new Client('ws://localhost:2567')\nconst room = client.join('my_room')\n\nroom.onStateChange((state) => {\n\tconsole.log('New state:', state)\n})\n"})}),"\n",(0,s.jsxs)(t.p,{children:["We recommend creating a ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://react.dev/learn/passing-data-deeply-with-context",children:"Context Provider"})})," to manage the Colyseus client and room. This will allow you to access the client and room from anywhere in your activity."]}),"\n",(0,s.jsx)(t.h3,{id:"more-about-colyseus",children:"More About Colyseus"}),"\n",(0,s.jsx)(o._,{children:(0,s.jsx)(i.Z,{href:"https://docs.colyseus.io/",title:"\ud83d\udd17 Colyseus Docs",description:"Learn more about Colyseus and its features."})})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},5396:(e,t,n)=>{n.d(t,{Z:()=>o});var s=n(7294),r=n(3692),i=n(2503);const o=e=>{const{description:t,href:n,title:o}=e;return s.createElement(r.Z,{className:"col col--6 nodecor margin-bottom--lg",to:n},s.createElement("div",{className:"card padding--lg cardContent"},s.createElement(i.Z,{as:"h4",className:"text--truncate cardTitle"},o),s.createElement("p",{className:"text--truncate cardDescription"},t)))}},352:(e,t,n)=>{n.d(t,{_:()=>r});var s=n(7294);const r=e=>{const{children:t}=e;return s.createElement("div",{className:"row cardContainer"},t)}},4263:(e,t,n)=>{n.d(t,{o:()=>p});var s=n(5317),r=n(8849),i=n.n(r),o=n(7294);const a=e=>{const{defaultValue:t,onSelect:n,options:r}=e,[a,l]=(0,o.useState)(!1),[c,d]=(0,o.useState)(t??r[0]);(0,o.useEffect)((()=>{d(t??r[0])}),[t,r]);const u=e=>()=>{d(e),n(e),l(!1)};return o.createElement("div",{className:"select-container"},o.createElement("button",{className:"select-row",onClick:()=>{l(!a)}},o.createElement("span",{className:"select-text no-margin"},c.label),o.createElement(i(),{path:a?s.Waq:s.CW,size:"16px",color:"rgb(161, 161, 161)"})),a&&o.createElement("menu",{className:"select-menu"},r.map((e=>o.createElement("button",{key:e.value,className:e.value===c.value?"select-menu-active":void 0,onClick:u(e)},e.label)))))};var l=n(640),c=n.n(l);var d=n(5103),u=n(8583);const m=(0,d.cn)("npm");const h=[{label:"NPM",value:"npm"},{label:"Yarn",value:"yarn"},{label:"PNPM",value:"pnpm"}],p=e=>{const{children:t,create:n,execute:r,install:l,title:d="Terminal"}=e,[p]=[async e=>c()(e)],[y,x]=function(){const[e,t]=(0,u.KO)(m);return[e,t]}(),g=h.find((e=>e.value===y));let v=t;"string"==typeof v&&(v=v.trim());let j="";n?j=function(e){if("npm"===e)return"npx create-robo";if("yarn"===e)return"yarn create robo";if("pnpm"===e)return"pnpm create robo"}(g.value)+" ":r?j=function(e){if("npm"===e)return"npx";if("yarn"===e)return"yarn";if("pnpm"===e)return"pnpm";if("bun"===e)return"bun"}(g.value)+" ":l&&v?j=function(e){if("npm"===e)return"npm install";if("yarn"===e)return"yarn add";if("pnpm"===e)return"pnpm add";if("bun"===e)return"bun add"}(g.value)+" ":l&&(j=g.value+" install");return o.createElement("div",{className:"margin-bottom--lg terminal"},o.createElement("div",{className:"terminal-header"},o.createElement(i(),{path:s.aTZ,size:"16px",color:"rgb(161, 161, 161)"}),o.createElement("span",{className:"terminal-header-text"},d),o.createElement("div",{className:"spacer"}),o.createElement(a,{defaultValue:g,onSelect:e=>{console.log(e),x(e.value)},options:h}),o.createElement("button",{onClick:()=>{p(j+v)}},o.createElement(i(),{path:s.a0Z,size:"20px",color:"rgb(161, 161, 161)"}))),o.createElement("pre",{className:"prism-code language-bash codeBlock_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module thin-scrollbar terminal-bg"},o.createElement("code",{className:"codeBlockLines_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module"},o.createElement("span",{className:"token-line"},n||r||l?o.createElement(o.Fragment,null,o.createElement("span",{className:"token plain"},j),o.createElement("strong",null,o.createElement("span",{className:"token plain"},v))):o.createElement("span",{className:"token plain"},v)))))}}}]);