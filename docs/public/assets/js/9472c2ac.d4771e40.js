"use strict";(self.webpackChunkrobo_js_docs=self.webpackChunkrobo_js_docs||[]).push([[304],{1209:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>h});var t=s(4848),o=s(8453),r=s(5646),i=s(9733);const c={image:"https://preview.robojs.dev?path=/plugins/sync"},l="@robojs/sync",a={id:"plugins/sync",title:"@robojs/sync",description:"Real-time state sync across clients the simplest way possible. Perfect for multiplayer games and chat apps. It's like magic, but real! \ud83c\udfa9\u2728",source:"@site/docs/plugins/sync.mdx",sourceDirName:"plugins",slug:"/plugins/sync",permalink:"/plugins/sync",draft:!1,unlisted:!1,editUrl:"https://github.com/Wave-Play/robo.js/edit/main/docs/docs/plugins/sync.mdx",tags:[],version:"current",lastUpdatedBy:"Pkmmte Xeleon",lastUpdatedAt:1715553501e3,frontMatter:{image:"https://preview.robojs.dev?path=/plugins/sync"},sidebar:"tutorialSidebar",previous:{title:"@robojs/server",permalink:"/plugins/server"},next:{title:"\u2728 Robo Templates",permalink:"/templates/overview"}},d={},h=[{value:"Installation \ud83d\udcbb",id:"installation-",level:2},{value:"Usage \ud83c\udfa8",id:"usage-",level:2},{value:"Need more power? \u26a1",id:"need-more-power-",level:2},{value:"More on GitHub",id:"more-on-github",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"robojssync",children:"@robojs/sync"}),"\n",(0,t.jsx)(n.p,{children:"Real-time state sync across clients the simplest way possible. Perfect for multiplayer games and chat apps. It's like magic, but real! \ud83c\udfa9\u2728"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const [position, setPosition] = useSyncState({ x: 0, y: 0 }, [channelId])\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It works exactly like React's ",(0,t.jsx)(n.code,{children:"useState"}),", but it syncs the state across all clients in real-time using websockets, sharing the same state across all clients with the same dependency array. (In this case, ",(0,t.jsx)(n.code,{children:"[channelId]"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["No more manual websocket handling or state synchronization. Just focus on building your app and let ",(0,t.jsx)(n.code,{children:"@robojs/sync"})," handle the rest. It works out of the box as long as you also have the ",(0,t.jsx)(n.code,{children:"@robojs/server"})," plugin installed."]}),"\n",(0,t.jsxs)(n.p,{children:["\u279e ",(0,t.jsxs)(n.a,{href:"https://docs.roboplay.dev/docs/getting-started",children:["\ud83d\udcda ",(0,t.jsx)(n.strong,{children:"Documentation:"})," Getting started"]})]}),"\n",(0,t.jsxs)(n.p,{children:["\u279e ",(0,t.jsxs)(n.a,{href:"https://roboplay.dev/discord",children:["\ud83d\ude80 ",(0,t.jsx)(n.strong,{children:"Community:"})," Join our Discord server"]})]}),"\n",(0,t.jsx)(n.h2,{id:"installation-",children:"Installation \ud83d\udcbb"}),"\n",(0,t.jsx)(n.p,{children:"To install this plugin, navigate to your existing Robo project's directory and run the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx robo add @robojs/sync\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," You will also need to install the ",(0,t.jsx)(n.code,{children:"@robojs/server"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["That's it! You can now start using ",(0,t.jsx)(n.code,{children:"useSyncState"})," in your project. Just wrap your App component with the ",(0,t.jsx)(n.code,{children:"SyncProvider"})," and you're good to go!"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { SyncProvider } from '@robojs/sync'\n\nexport function App() {\n\treturn (\n\t\t<SyncProvider>\n\t\t\t<Activity />\n\t\t</SyncProvider>\n\t)\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage-",children:"Usage \ud83c\udfa8"}),"\n",(0,t.jsxs)(n.p,{children:["Here's a simple example of how you can use ",(0,t.jsx)(n.code,{children:"useSyncState"})," in your project:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { useSyncState } from '@robojs/sync'\nimport { useDiscordSdk } from '../hooks/useDiscordSdk'\n\nexport function Player() {\n\tconst { session } = useDiscordSdk()\n\tconst [position, setPosition] = useSyncState({ x: 0, y: 0 }, [session.user.id, 'position'])\n\n\tconst handleMouseMove = (event) => {\n\t\tsetPosition({ x: event.clientX, y: event.clientY })\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tonMouseMove={handleMouseMove}\n\t\t\tstyle={{\n\t\t\t\tposition: 'absolute',\n\t\t\t\tleft: position.x,\n\t\t\t\ttop: position.y\n\t\t\t}}\n\t\t>\n\t\t\tPlayer\n\t\t</div>\n\t)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The provider accepts an optional ",(0,t.jsx)(n.code,{children:"loadingScreen"})," prop, which is a component to display while the websocket connection is being established."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"<SyncProvider loadingScreen={<LoadingScreen />}>\n\t<Activity />\n</SyncProvider>\n"})}),"\n",(0,t.jsx)(n.p,{children:"We also expose a way to manually start and get the websocket connection:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { SyncServer } from '@robojs/sync/server.js'\n\n// To manually start the websocket server\nSyncServer.start()\n\n// To get the underlying websocket server\nconst wss = SyncServer.getSocketServer()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"need-more-power-",children:"Need more power? \u26a1"}),"\n",(0,t.jsxs)(n.p,{children:["We highly recommend checking out ",(0,t.jsx)(n.a,{href:"https://colyseus.io/",children:(0,t.jsx)(n.strong,{children:"Colyseus"})}),", a powerful multiplayer game server! It's the perfect companion to ",(0,t.jsx)(n.code,{children:"@robojs/sync"})," for building real-time multiplayer games."]}),"\n",(0,t.jsxs)(n.p,{children:["\u279e ",(0,t.jsxs)(n.a,{href:"https://colyseus.io/",children:["\u2694 ",(0,t.jsx)(n.strong,{children:"Colyseus:"})," Multiplayer Game Server"]})]}),"\n",(0,t.jsxs)(n.p,{children:["\u279e ",(0,t.jsxs)(n.a,{href:"https://github.com/Wave-Play/robo.js/tree/main/templates/activity-ts-colyseus-react",children:["\ud83d\udcda ",(0,t.jsx)(n.strong,{children:"Template:"})," Colyseus Discord Activity"]})]}),"\n",(0,t.jsx)(n.p,{children:"Enjoy your enhanced Robo! \ud83d\ude80"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Don't have a Robo project?"})," ",(0,t.jsx)(n.a,{href:"https://docs.roboplay.dev/docs/getting-started",children:"Create your own!"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"more-on-github",children:"More on GitHub"}),"\n",(0,t.jsx)(i.Q,{children:(0,t.jsx)(r.Z,{href:"https://github.com/Wave-Play/robo.js/tree/main/packages/plugin-sync",title:"\ud83d\udd17 GitHub Repository",description:"Explore source code on GitHub."})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},5646:(e,n,s)=>{s.d(n,{Z:()=>i});s(6540);var t=s(8774),o=s(1107),r=s(4848);const i=e=>{const{description:n,href:s,title:i}=e;return(0,r.jsx)(t.A,{className:"col col--6 nodecor margin-bottom--lg",to:s,children:(0,r.jsxs)("div",{className:"card padding--lg cardContent",children:[(0,r.jsx)(o.A,{as:"h4",className:"text--truncate cardTitle",children:i}),(0,r.jsx)("p",{className:"text--truncate cardDescription",children:n})]})})}},9733:(e,n,s)=>{s.d(n,{Q:()=>o});s(6540);var t=s(4848);const o=e=>{const{children:n}=e;return(0,t.jsx)("div",{className:"row cardContainer",children:n})}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var t=s(6540);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);