/*! For license information please see 126a650c.823a6d6f.js.LICENSE.txt */
"use strict";(self.webpackChunkrobo_js_docs=self.webpackChunkrobo_js_docs||[]).push([[5373],{2814:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=n(5893),a=n(1151),s=n(4866),o=n(5162);const i={image:"https://preview.robojs.dev?path=/robojs/state"},l="\ud83d\udcbe State Management",c={id:"robojs/state",title:"\ud83d\udcbe State Management",description:"States are your Robo's personal memory bank. They store data, allowing your bot to remember information across its lifespan. However, states are ephemeral; they clear out when your Robo powers off.",source:"@site/docs/robojs/state.md",sourceDirName:"robojs",slug:"/robojs/state",permalink:"/robojs/state",draft:!1,unlisted:!1,editUrl:"https://github.com/Wave-Play/robo.js/edit/main/docs/docs/robojs/state.md",tags:[],version:"current",lastUpdatedBy:"Pkmmte Xeleon",lastUpdatedAt:1715550872e3,frontMatter:{image:"https://preview.robojs.dev?path=/robojs/state"},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcc2 Robo File Structure",permalink:"/robojs/files"},next:{title:"\ud83d\udcd8 TypeScript",permalink:"/robojs/typescript"}},u={},d=[{value:"Usage \ud83d\udcdd",id:"usage-",level:2},{value:"Forking Namespace \ud83c\udf74",id:"forking-namespace-",level:2},{value:"Persisting Data \ud83d\udd04",id:"persisting-data-",level:2},{value:"Namespaces",id:"namespaces",level:2},{value:"How it Works",id:"how-it-works",level:3},{value:"Practical Example",id:"practical-example",level:3},{value:"Opting for States over Flashcore",id:"opting-for-states-over-flashcore",level:2}];function p(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"-state-management",children:"\ud83d\udcbe State Management"}),"\n",(0,r.jsx)(t.p,{children:"States are your Robo's personal memory bank. They store data, allowing your bot to remember information across its lifespan. However, states are ephemeral; they clear out when your Robo powers off."}),"\n",(0,r.jsxs)(t.p,{children:["On the flip side, if you're tweaking your Robo using ",(0,r.jsx)(t.code,{children:"/dev restart"})," or playing around in dev mode, states will survive. They stick around through hot reloads and restarts, waiting patiently for the next run."]}),"\n",(0,r.jsx)(t.h2,{id:"usage-",children:"Usage \ud83d\udcdd"}),"\n",(0,r.jsx)(t.p,{children:"States are a breeze to use. Check out this example:"}),"\n",(0,r.jsxs)(s.Z,{groupId:"examples-script",children:[(0,r.jsx)(o.Z,{value:"js",label:"Javascript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/commands/add-points.js"',children:"import { setState, getState } from 'robo.js'\n\nexport default () => {\n\tlet currentPoints = getState('currentPoints') ?? 0\n\tsetState('currentPoints', currentPoints + 10)\n\treturn `You've gained 10 points! Your current total is ${currentPoints + 10} points.`\n}\n"})})}),(0,r.jsx)(o.Z,{value:"ts",label:"Typescript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'showLineNumbers title="/src/commands/add-points.ts"',children:"import { setState, getState } from 'robo.js'\nimport type { CommandResult } from 'robo.js'\n\nexport default (): CommandResult => {\n\tlet currentPoints = getState('currentPoints') ?? 0\n\tsetState('currentPoints', currentPoints + 10)\n\treturn `You've gained 10 points! Your current total is ${currentPoints + 10} points.`\n}\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:"And you can retrieve state values like so:"}),"\n",(0,r.jsxs)(s.Z,{groupId:"examples-script",children:[(0,r.jsx)(o.Z,{value:"js",label:"Javascript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/commands/get-points.js"',children:"import { getState } from 'robo.js'\n\nexport default () => {\n\tlet currentPoints = getState('currentPoints') ?? 0\n\treturn `You currently have ${currentPoints} points.`\n}\n"})})}),(0,r.jsx)(o.Z,{value:"ts",label:"Typescript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'showLineNumbers title="/src/commands/get-points.ts"',children:"import { getState } from 'robo.js'\nimport type { CommandResult } from 'robo.js'\n\nexport default (): CommandResult => {\n\tlet currentPoints = getState('currentPoints') ?? 0\n\treturn `You currently have ${currentPoints} points.`\n}\n"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"forking-namespace-",children:"Forking Namespace \ud83c\udf74"}),"\n",(0,r.jsxs)(t.p,{children:["Imagine two different modules trying to use a state named ",(0,r.jsx)(t.code,{children:"counter"}),". Without careful management, they could conflict, leading to unexpected results. Here's how it might look:"]}),"\n",(0,r.jsxs)(s.Z,{groupId:"examples-script",children:[(0,r.jsx)(o.Z,{value:"js",label:"Javascript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/modules/foo/commands/increment.js"',children:"import { setState, getState } from 'robo.js'\n\nexport default () => {\n\tlet counter = getState('counter') ?? 0\n\tsetState('counter', counter + 1)\n\treturn `Counter in Foo module is now ${counter + 1}.`\n}\n"})})}),(0,r.jsx)(o.Z,{value:"ts",label:"Typescript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'showLineNumbers title="/src/modules/foo/commands/increment.ts"',children:"import { setState, getState } from 'robo.js'\nimport type { CommandResult } from 'robo.js'\n\nexport default (): CommandResult => {\n\tlet counter = getState('counter') ?? 0\n\tsetState('counter', counter + 1)\n\treturn `Counter in Foo module is now ${counter + 1}.`\n}\n"})})})]}),"\n",(0,r.jsxs)(s.Z,{groupId:"examples-script",children:[(0,r.jsx)(o.Z,{value:"js",label:"Javascript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/modules/bar/commands/bar-increment.js"',children:"import { setState, getState } from 'robo.js'\n\nexport default () => {\n\tlet counter = getState('counter') ?? 0\n\tsetState('counter', counter + 5)\n\treturn `Counter in Bar module is now ${counter + 5}.`\n}\n"})})}),(0,r.jsx)(o.Z,{value:"ts",label:"Typescript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'showLineNumbers title="/src/modules/bar/commands/bar-increment.ts"',children:"import { setState, getState } from 'robo.js'\nimport type { CommandResult } from 'robo.js'\n\nexport default (): CommandResult => {\n\tlet counter = getState('counter') ?? 0\n\tsetState('counter', counter + 5)\n\treturn `Counter in Bar module is now ${counter + 5}.`\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["In this scenario, the ",(0,r.jsx)(t.code,{children:"counter"})," state would get jumbled between the ",(0,r.jsx)(t.code,{children:"foo"})," and ",(0,r.jsx)(t.code,{children:"bar"})," modules. To avoid this mess, we can fork the state:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/modules/foo/state.js/" {4}',children:"import { State } from 'robo.js'\n\n// Forking the state object\nconst { getState, setState } = State.fork('foo')\nexport { getState, setState }\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Now, the ",(0,r.jsx)(t.code,{children:"foo"})," module has its own clean namespace. Import these forked functions in your module's commands and events to prevent state conflicts. Here's an example:"]}),"\n",(0,r.jsxs)(s.Z,{groupId:"examples-script",children:[(0,r.jsx)(o.Z,{value:"js",label:"Javascript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/modules/foo/commands/increment.js" {5}',children:"import { setState, getState } from '../state.js'\n\nexport default () => {\n\tlet counter = getState('counter') ?? 0\n\tsetState('counter', counter + 1)\n\treturn `Counter in Foo module is now ${counter + 1}.`\n}\n"})})}),(0,r.jsx)(o.Z,{value:"ts",label:"Typescript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'showLineNumbers title="/src/modules/foo/commands/increment.ts" {6}',children:"import { setState, getState } from '../state.js'\nimport type { CommandResult } from 'robo.js'\n\nexport default (): CommandResult => {\n\tlet counter = getState('counter') ?? 0\n\tsetState('counter', counter + 1)\n\treturn `Counter in Foo module is now ${counter + 1}.`\n}\n"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"persisting-data-",children:"Persisting Data \ud83d\udd04"}),"\n",(0,r.jsxs)(t.p,{children:["States vanish when your Robo powers off. Unless you set them to persist, that is. With the ",(0,r.jsx)(t.code,{children:"persist"})," option, your data will be stored safely for when Robo gets back to work:"]}),"\n",(0,r.jsxs)(s.Z,{groupId:"examples-script",children:[(0,r.jsx)(o.Z,{value:"js",label:"Javascript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",metastring:'title="/src/commands/set-important-data.js" showLineNumbers {5}',children:"import { setState } from 'robo.js'\n\nexport default () => {\n\t// Setting a state with persist option\n\tsetState('importantData', 'Never forget this', { persist: true })\n\treturn \"Data has been safely stored. Don't worry, Robo won't forget!\"\n}\n"})})}),(0,r.jsx)(o.Z,{value:"ts",label:"Typescript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'title="/src/commands/set-important-data.ts" showLineNumbers {6}',children:"import { setState } from 'robo.js'\nimport type { CommandResult } from 'robo.js'\n\nexport default (): CommandResult => {\n\t// Setting a state with persist option\n\tsetState('importantData', 'Never forget this', { persist: true })\n\treturn \"Data has been safely stored. Don't worry, Robo won't forget!\"\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["Now, even if your Robo powers down, the ",(0,r.jsx)(t.code,{children:"importantData"})," state will still be there when it wakes up. Under the hood, Robo.js uses ",(0,r.jsx)(t.strong,{children:"Flashcore"})," to make all this magical persistence happen. Pretty cool, right?"]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"Values stored as state must be serializable. If they're not, they can't be persisted. Don't try to store complex objects like a Discord.js Guild or Message\u2014keep it simple."})}),"\n",(0,r.jsx)(t.h2,{id:"namespaces",children:"Namespaces"}),"\n",(0,r.jsx)(t.p,{children:"Namespacing in States helps you avoid key collisions and keep your data well-organized, particularly when dealing with multiple contexts like different users or servers."}),"\n",(0,r.jsx)(t.h3,{id:"how-it-works",children:"How it Works"}),"\n",(0,r.jsx)(t.p,{children:"Namespacing functions similarly to drawers or compartments where you can categorize and store your data separately. This is incredibly useful when you need to store similar types of data for different entities without any mix-up."}),"\n",(0,r.jsxs)(t.p,{children:["To use a namespace in States, you include it in the ",(0,r.jsx)(t.code,{children:"options"})," object when you call ",(0,r.jsx)(t.code,{children:"getState"})," or ",(0,r.jsx)(t.code,{children:"setState"}),". This object has a ",(0,r.jsx)(t.code,{children:"namespace"})," property where you define your desired namespace."]}),"\n",(0,r.jsx)(t.p,{children:"For example, setting a value with a namespace looks like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"setState('my-key', 'example-value', {\n\tnamespace: 'my-namespace'\n})\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Here, the key ",(0,r.jsx)(t.code,{children:"'my-key'"})," is placed under the ",(0,r.jsx)(t.code,{children:"'my-namespace'"})," category, keeping it distinct from the same key in other namespaces. To retrieve the value, you would use the same namespace:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const value = await getState('my-key', {\n\tnamespace: 'my-namespace'\n})\n"})}),"\n",(0,r.jsx)(t.h3,{id:"practical-example",children:"Practical Example"}),"\n",(0,r.jsx)(t.p,{children:"Imagine you have a Discord bot that hosts daily challenges in different servers. You want to track each user's participation in these challenges separately for each server. This is where namespacing becomes incredibly useful."}),"\n",(0,r.jsxs)(s.Z,{groupId:"examples-script",children:[(0,r.jsx)(o.Z,{value:"js",label:"Javascript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",metastring:'showLineNumbers title="/src/commmands/daily-challenge.js" {9,18}',children:"import { getState, setState } from 'robo.js'\n\nexport default async (interaction) => {\n\tconst userId = interaction.user.id\n\tconst challengeId = 'daily-challenge' // Example challenge ID\n\n\t// Fetch the user's challenge participation state for this server\n\tconst userParticipation =\n\t\t(await getState(userId, {\n\t\t\tnamespace: interaction.guildId\n\t\t})) ?? {}\n\n\t// Increment the user's participation count for the specific challenge\n\tconst newParticipationCount = (userParticipation[challengeId] ?? 0) + 1\n\tuserParticipation[challengeId] = newParticipationCount\n\n\t// Update the state with the new count\n\tawait setState(userId, userParticipation, {\n\t\tnamespace: interaction.guildId\n\t})\n\n\treturn `You've participated in the '${challengeId}' ${newParticipationCount} times in this server! Keep it up!`\n}\n"})})}),(0,r.jsx)(o.Z,{value:"ts",label:"Typescript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'showLineNumbers title="/src/commmands/daily-challenge.ts" {11,20}',children:"import { getState, setState } from 'robo.js'\nimport type { CommandResult } from 'robo.js'\nimport type { ChatInputCommandInteraction } from 'discord.js'\n\nexport default async (interaction: ChatInputCommandInteraction): Promise<CommandResult> => {\n\tconst userId = interaction.user.id\n\tconst challengeId = 'daily-challenge' // Example challenge ID\n\n\t// Fetch the user's challenge participation state for this server\n\tconst userParticipation =\n\t\t(await getState(userId, {\n\t\t\tnamespace: interaction.guildId\n\t\t})) ?? {}\n\n\t// Increment the user's participation count for the specific challenge\n\tconst newParticipationCount = (userParticipation[challengeId] ?? 0) + 1\n\tuserParticipation[challengeId] = newParticipationCount\n\n\t// Update the state with the new count\n\tawait setState(userId, userParticipation, {\n\t\tnamespace: interaction.guildId\n\t})\n\n\treturn `You've participated in the '${challengeId}' ${newParticipationCount} times in this server! Keep it up!`\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["In this example, the bot tracks how many times a user has participated in a specific challenge (",(0,r.jsx)(t.code,{children:"daily-challenge"}),") in each server. The ",(0,r.jsx)(t.code,{children:"getState"})," and ",(0,r.jsx)(t.code,{children:"setState"})," functions use the server ID as the namespace, ensuring that participation counts are kept separate and accurate for each server."]}),"\n",(0,r.jsx)(t.p,{children:"By using namespacing in this way, you can create complex, server-specific interactions that enrich the user experience without data collision or confusion."}),"\n",(0,r.jsx)(t.h2,{id:"opting-for-states-over-flashcore",children:"Opting for States over Flashcore"}),"\n",(0,r.jsx)(t.p,{children:"Opt for States when handling data that's needed temporarily or within a single session. States excel in scenarios where speed is crucial and data doesn't need to survive a Robo shutdown."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Speed & Synchronicity:"})," Immediate updates and access, ideal for data requiring quick interactions."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Session-Specific Data:"})," Perfect for temporary, transient data not meant to be stored long-term."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"In-Memory Storage:"})," Operates using RAM, ensuring rapid data manipulation."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Data Type Flexibility:"})," Can store diverse data types, including complex objects and classes."]}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294),a=n(6905);const s={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(s.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(7462),a=n(7294),s=n(6905),o=n(2466),i=n(6550),l=n(469),c=n(1980),u=n(7392),d=n(812);function p(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return p(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=m(e),[o,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[c,u]=g({queryString:n,groupId:r}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,d.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),j=(()=>{const e=c??p;return h({value:e,tabValues:s})?e:null})();(0,l.Z)((()=>{j&&i(j)}),[j]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)}),[u,f,s]),tabValues:s}}var j=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function x(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),r=c[n].value;r!==i&&(d(t),l(r))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},o,{className:(0,s.Z)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=f(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",b.tabList)},a.createElement(x,(0,r.Z)({},t,e)),a.createElement(y,(0,r.Z)({},t,e)))}function w(e){const t=(0,j.Z)();return a.createElement(v,(0,r.Z)({key:String(t)},e),p(e.children))}},5251:(e,t,n)=>{var r=n(7294),a=Symbol.for("react.element"),s=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,s={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)o.call(t,r)&&!l.hasOwnProperty(r)&&(s[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===s[r]&&(s[r]=t[r]);return{$$typeof:a,type:e,key:c,ref:u,props:s,_owner:i.current}}t.Fragment=s,t.jsx=c,t.jsxs=c},5893:(e,t,n)=>{e.exports=n(5251)},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var r=n(7294);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);